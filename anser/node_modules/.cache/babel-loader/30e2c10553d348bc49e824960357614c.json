{"ast":null,"code":"// Utility functions\nvar PREFIXES = 'Webkit Moz O ms'.split(' ');\nvar FLOAT_COMPARISON_EPSILON = 0.001; // Copy all attributes from source object to destination object.\n// destination object is mutated.\n\nfunction extend(destination, source, recursive) {\n  destination = destination || {};\n  source = source || {};\n  recursive = recursive || false;\n\n  for (var attrName in source) {\n    if (source.hasOwnProperty(attrName)) {\n      var destVal = destination[attrName];\n      var sourceVal = source[attrName];\n\n      if (recursive && isObject(destVal) && isObject(sourceVal)) {\n        destination[attrName] = extend(destVal, sourceVal, recursive);\n      } else {\n        destination[attrName] = sourceVal;\n      }\n    }\n  }\n\n  return destination;\n} // Renders templates with given variables. Variables must be surrounded with\n// braces without any spaces, e.g. {variable}\n// All instances of variable placeholders will be replaced with given content\n// Example:\n// render('Hello, {message}!', {message: 'world'})\n\n\nfunction render(template, vars) {\n  var rendered = template;\n\n  for (var key in vars) {\n    if (vars.hasOwnProperty(key)) {\n      var val = vars[key];\n      var regExpString = '\\\\{' + key + '\\\\}';\n      var regExp = new RegExp(regExpString, 'g');\n      rendered = rendered.replace(regExp, val);\n    }\n  }\n\n  return rendered;\n}\n\nfunction setStyle(element, style, value) {\n  var elStyle = element.style; // cache for performance\n\n  for (var i = 0; i < PREFIXES.length; ++i) {\n    var prefix = PREFIXES[i];\n    elStyle[prefix + capitalize(style)] = value;\n  }\n\n  elStyle[style] = value;\n}\n\nfunction setStyles(element, styles) {\n  forEachObject(styles, function (styleValue, styleName) {\n    // Allow disabling some individual styles by setting them\n    // to null or undefined\n    if (styleValue === null || styleValue === undefined) {\n      return;\n    } // If style's value is {prefix: true, value: '50%'},\n    // Set also browser prefixed styles\n\n\n    if (isObject(styleValue) && styleValue.prefix === true) {\n      setStyle(element, styleName, styleValue.value);\n    } else {\n      element.style[styleName] = styleValue;\n    }\n  });\n}\n\nfunction capitalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\nfunction isString(obj) {\n  return typeof obj === 'string' || obj instanceof String;\n}\n\nfunction isFunction(obj) {\n  return typeof obj === 'function';\n}\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n} // Returns true if `obj` is object as in {a: 1, b: 2}, not if it's function or\n// array\n\n\nfunction isObject(obj) {\n  if (isArray(obj)) {\n    return false;\n  }\n\n  var type = typeof obj;\n  return type === 'object' && !!obj;\n}\n\nfunction forEachObject(object, callback) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key)) {\n      var val = object[key];\n      callback(val, key);\n    }\n  }\n}\n\nfunction floatEquals(a, b) {\n  return Math.abs(a - b) < FLOAT_COMPARISON_EPSILON;\n} // https://coderwall.com/p/nygghw/don-t-use-innerhtml-to-empty-dom-elements\n\n\nfunction removeChildren(el) {\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n}\n\nmodule.exports = {\n  extend: extend,\n  render: render,\n  setStyle: setStyle,\n  setStyles: setStyles,\n  capitalize: capitalize,\n  isString: isString,\n  isFunction: isFunction,\n  isObject: isObject,\n  forEachObject: forEachObject,\n  floatEquals: floatEquals,\n  removeChildren: removeChildren\n};","map":null,"metadata":{},"sourceType":"script"}